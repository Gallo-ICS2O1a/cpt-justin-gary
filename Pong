x, y = 250, 250
w, h = 50, 50
speedX, speedY = 5, 3
paddleW = 30
paddleH = 100
paddleS = 5
keyStatesL = []
keyStatesR = []
for i in range(233):
    keyStatesR.append(False)
paddleR = PVector(460, 250)

for i in range(233):
    keyStatesL.append(False)
paddleL = PVector(40, 250)

def setup():
    size(500, 500)
    rectMode(CENTER)

def draw():
    global keyStatesR
    
    if keyStatesR[38]:  # up
        paddleR.y -= 5
    elif keyStatesR[40]:  # down
        paddleR.y += 5   
    if keyStatesL[87]:
        paddleL.y -= 5
    elif keyStatesL[83]:
        paddleL.y += 5
        
    background(51)
    
    drawCircle()
    moveCircle()
    bounceDirection()
    drawPaddle()
    restrictPaddle()
    contactPaddle()

def drawCircle():
    fill(255, 0, 0)
    ellipse(x, y, w, h)
    

def moveCircle():
    global x, y
    
    x = x + speedX
    y = y + speedY
    

def bounceDirection():
    global speedX, speedY
    if x > width - w / 2:
        speedX = -speedX
    elif x < 0 + w / 2:
        speedX = -speedX
    
    if y > height - h / 2:
        speedY = -speedY
    elif y < 0 + h / 2:
        speedY = -speedY
        

def drawPaddle():
    fill(255)
    rect(paddleR.x, paddleR.y, paddleW, paddleH)
    rect(paddleL.x, paddleL.y, paddleW, paddleH)
    
def restrictPaddle():
    global paddleS
    if paddleR.y - paddleH / 2 < 0:
        paddleR.y += 5
    if paddleR.y + paddleH / 2 > height:
        paddleR.y -= 5
        
    if paddleL.y - paddleH / 2 < 0:
        paddleL.y = paddleL.y + paddleS
    if paddleL.y + paddleH / 2 > height:
        paddleL.y = paddleL.y - paddleS
        
        
def contactPaddle():
    global speedX
    if (x - w / 2 < paddleL.x + paddleW / 2 and y - h / 2 < paddleL.y + paddleH / 2 
        and y + h / 2 > paddleL.y - paddleH ):
        speedX = -speedX
    
    if (x + w / 2 > paddleR.x - paddleW / 2 and y - h / 2 < paddleR.y + paddleH / 2 
        and y + h / 2 > paddleR.y - paddleH ):
        speedX = -speedX
                
def keyPressed():
    global keyStatesR
    global keyStatesL
    keyStatesR[keyCode] = True
    keyStatesL[keyCode] = True
    
    
def keyReleased():
    global keyStatesR
    global keyStatesL
    keyStatesR[keyCode] = False
    keyStatesL[keyCode] = False

    
