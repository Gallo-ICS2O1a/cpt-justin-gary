x, y = 250, 250
w, h = 50, 50
speedX, speedY = 5, 3
paddleW = 30
paddleH = 100
paddleS = 10
keyStatesL = []
keyStatesR = []
font = PFont
t = int
interval = 3
screen = 2
currenttime = int(millis() / 1000)

for i in range(233):
    keyStatesR.append(False)
paddleR = PVector(485, 250)

for i in range(233):
    keyStatesL.append(False)
paddleL = PVector(15, 250)

def setup():
    size(500, 500)
    rectMode(CENTER)
    ellipseMode(CENTER)

def draw():
    global keyStatesR
    global screen
    global time
    
    if screen == 1:
        if keyStatesR[38]:  # up
            paddleR.y -= 5
        elif keyStatesR[40]:  # down
            paddleR.y += 5  
        if keyStatesL[87]:
            paddleL.y -= 5
        elif keyStatesL[83]:
            paddleL.y += 5
            
        background(0)
        
        drawBall()
        moveBall()
        bounceDirection()
        drawPaddle()
        restrictPaddle()
        contactPaddle()
    
    elif screen == 2:
        global interval
        background(0)
        
        fill(255, 0, 0)
        ellipse(250, 250, 50, 50)
        
        interval = interval + currenttime
    
        t = interval - int(millis() / 1000)
        time = nf(t, 1)
        
        if t == 0:
            screen = 1
            #interval += 3
        
        fill(255)
        textSize(100)
        text(time, width / 2 - 30, height / 2 + 35);
    
def drawBall():
    fill(255, 0, 0)
    ellipse(x, y, w, h)
    

def moveBall():
    global x, y
    
    x += speedX
    y += speedY
    

def bounceDirection():
    global speedX, speedY
    if x > width - w / 2:
        speedX = -speedX
    elif x < 0 + w / 2:
        speedX = -speedX
    
    if y > height - h / 2:
        speedY = -speedY
    elif y < 0 + h / 2:
        speedY = -speedY


def drawPaddle():
    fill(255, 238, 0)
    rect(paddleR.x, paddleR.y, paddleW, paddleH)
    fill(21, 255, 0)
    rect(paddleL.x, paddleL.y, paddleW, paddleH)
    
def restrictPaddle():
    global paddleS
    if paddleR.y - paddleH / 2 < 0:
        paddleR.y += 5
    if paddleR.y + paddleH / 2 > height:
        paddleR.y -= 5
        
    if paddleL.y - paddleH / 2 < 0:
        paddleL.y = paddleL.y + paddleS
    if paddleL.y + paddleH / 2 > height:
        paddleL.y = paddleL.y - paddleS
        
        
def contactPaddle():
    global speedX, screen
    global x, y
    
    # left paddle
    if x == 50 and y < paddleL.y + 70 and y > paddleL.y - 70:
        if speedX < 0:
            speedX = -speedX

    elif x == 20:
        screen = 2
        interval = 3
        x = 250
        y = 250
        
    # right paddle
    if x == 450 and y < paddleR.y + 70 and y > paddleL.y - 70:
        if speedX > 0:
            speedX = -speedX
            

    
#    if (x - w / 2 < paddleL.x + paddleW / 2 and y - h / 2 < paddleL.y + paddleH / 2 
#        and y + h / 2 > paddleL.y - paddleH ):
#        if speedX < 0:
#            speedX = -speedX
   
#    elif (x + w / 2 > paddleR.x - paddleW / 2 and y - h / 2 < paddleR.y + paddleH / 2 
#        and y + h / 2 > paddleR.y - paddleH ):
#        if speedX > 0:
#            speedX = -speedX
                
def keyPressed():
    global keyStatesR
    global keyStatesL
    keyStatesR[keyCode] = True
    keyStatesL[keyCode] = True
    
    
def keyReleased():
    global keyStatesR
    global keyStatesL
    keyStatesR[keyCode] = False
    keyStatesL[keyCode] = False
    
